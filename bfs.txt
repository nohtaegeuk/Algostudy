import java.util.LinkedList;
import java.util.Queue;
class Solution {
    static Queue<Pos> q = new LinkedList<Pos>();
    static int n;
    static int[][] map;
    static int dy[] = {0, 0, -1, 1};
    static int dx[] = {-1, 1, 0, 0};
    static class Pos{
            int y;
            int x;
            int cost;
            int dir;

            Pos(int y, int x, int cost, int dir) {
                this.y = y;
                this.x = x;
                this.cost = cost;
                this.dir = dir;
            }
        }

    public int solution(int[][] board) {
        int answer = 0;

        n = board.length;
        map = new int[n][n];
        answer = bfs(board, Integer.MAX_VALUE);
        System.out.println(answer);
        return answer;
    }

    public static int bfs(int[][] board, int answer) {
        initialize();
        map[0][0] = 0;
        q.add(new Pos(0, 0, 0, -1));

        while (!q.isEmpty()) {
            Pos p = q.poll();

            if (p.y == n-1 && p.x == n-1) {
                answer = Math.min(answer, map[n-1][n-1]);
            }
            for (int i=0; i<4; i++) {
                int ny = p.y + dy[i];
                int nx = p.x + dx[i];

                if (ny < 0 || ny >= n || nx < 0 || nx >= n)
                    continue ;

                if (board[ny][nx] == 1)
                    continue ;

                int nCost = p.cost + 100;
                if (p.dir != i && p.dir != -1)
                    nCost += 500;

                if (map[ny][nx] < nCost)
                    continue ;

                map[ny][nx] = nCost;
                q.add(new Pos(ny, nx, nCost, i));
            }
        }

        return answer;
    }

    public static void initialize() {
        for (int i=0; i<n; i++) {
            for (int j=0; j<n; j++) {
                map[i][j] = Integer.MAX_VALUE;
            }
        }
    }

}