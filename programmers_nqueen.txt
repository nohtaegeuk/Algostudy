import java.util.*;
import java.io.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Queue;

class Solution {
		
        int answer;
		int dx[]= {0,0,1,-1,-1,-1,1,1}; // 검색해주기 위한 배열 만들기
		int dy[]= {-1,1,0,0,-1,1,-1,1};
    
	    public int solution(int n) {
	    	
            answer=0;
	    	
            int [][]map = new int[n][n]; // n크기만큼 배열 만들어주기
	    	
            solve(map,n,0); 
	        
            return answer;
            
	    }
		private void solve(int[][] map, int n, int cnt) {
			
            if(cnt==n) {
				
                answer++;
				return;
                
			}
			
			for(int i=0; i<n; i++) {
				
                if(!isBound(map,cnt,i,n)) {
                    continue;
                } 
                
				map[cnt][i]=1; // 1로 표시해주고
                
				solve(map,n,cnt+1); // 다시 재귀 돌려주기
                
				map[cnt][i]=0; // 무한루프를 방지하기 위해 다시 0으로
                
			}
			
		}
		private boolean isBound(int[][] map, int x, int y, int n ) {
			
            for(int i=0; i<8; i++) {
				
                int nx=x; //nx와 ny에 위치 넣어주기
				int ny=y;
				
                //검색해주기 위해서 while문 돌리기
				while(true) {
					
                    nx+=dx[i]; // 팔방탐색을 해주기.
					ny+=dy[i];
					
                    if(nx<0 || ny<0 || nx>=n || ny>=n){
                        break; // 범위 벗어나면 바로 깨주기
                        
                    } else if(map[nx][ny]==1){ // 만약에 1이면
                        
                        return false; // 그냥 바로 false 리턴
                    } 
				}
			}
            
			return true;
		}
	}