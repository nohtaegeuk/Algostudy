import java.util.*;
import java.io.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Queue;

class Solution {
    public int solution(String s) {   
       
        int answer =Integer.MAX_VALUE; // 최소 문자열을 찾기 위한 비교 변수.
        int length = s.length(); // length에 길이값 넣어줌.
        
        
        if(length == 1) { // length가 1이면 그냥 바로 1을 리턴해줌
            
            answer = 1;
            return answer;
            
        } else {
            // 1~ length/2 만큼 압축가능.
            for(int i =1;i<=s.length()/2;i++){
                
                String str = ""; // 압축 길이 별 문자열 변수.
                
                String temp=""; // 자른 문자열을 비교하기 위해
                
                int count = 1; // 자른 문자열 갯수 세기 위한 변수
            
                // substring()의 범위만큼 반복.
                for(int j =0;j<s.length()/i;j++){
                // 이전에 자른 문자열과 현재 자른 문자열이 같다면 카운팅.
                if(temp.equals(s.substring(j*i,(j*i)+i))){
                    count++;
                    continue;
                }
                // 카운팅 > 1인 경우는 count+temp 후 count 초기화.
                if(count >1){
                    str+=count+temp;
                    count = 1;
                // 나머지의 경우는 자른 문자열인 temp만 붙여준다.
                }else{
                    str+=temp;
                }
                
                // 현재 자른 문자열로 비교대상 변경.
                temp=s.substring(j*i,(j*i)+i);
            }
            
                // 마지막에 붙이지 못한 문자열을 붙인다. 
                if(count >1){
                    str+=count+temp;
                    count = 1;
                }else{
                str+=temp;
                }
            
                
                if( length % i !=0 ){ // 길이가 압축하는 길이로 나눠 지지 않으면, 
                 str += s.substring(length - length%i, length); // 나머지 부분부터 마지막까지 substring으로 이어 분여준다.
                }
            
              
                answer = Math.min(answer, str.length()); // 가장 짧은 길이를 answer에 넣엉줌.
            }
      
            
            return answer;
            }

    }
}
