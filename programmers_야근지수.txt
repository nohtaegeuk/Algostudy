import java.util.*;
import java.io.*;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Queue;

class Solution {
    
    static int result;
    
    public long solution(int n, int[] works) {
        
        long answer = 0;
        result = 0; //초기화
        int length = works.length; //길이를 넣어줌.
        
        for(int i = 0; i < length; i++) {
            result += works[i]; // 배열안에 있는 값들을 다 더해줌.
        }
        
        if( n >= result ) {
            return 0; // 퇴근까지 남은 시간이 작업량보다 더 많으면 걍 0 리턴.
        } 
        
        while( n != 0) { // n이 0 될때까지 반복해주는데
            
            int max = 0;

				// works에서 작업량이 가장 큰 거 찾기
				for(int i=0; i<works.length; i++){
                    if(works[i] > max){
                        max = works[i];
                    }
                } 
						

				// 배열 요소중 max 값과 동일하면 전부 다 감소시키기
				for(int i=0; i<works.length; i++) {
					if(works[i] == max) {
						works[i]--;
						n--;
						if(n == 0){
                            break; // 만약에 n이 0이 되면 그냥 더 감소시키지말고 끝내버리기.
                        }	
					}
				}
        
        
        }
        
        // 작업량 남은 것들을 제곱해서 answer에 더해주기.
        for( int i = 0; i < length; i++) {
            
            answer += (works[i] * works[i]); 
        }
        
        return answer;
    }
}