import java.util.*;

class Solution {
    
    static boolean visit[]; // 방문했는지 여부.
    static List<String> list = new ArrayList<>(); // 방문한 도시들을 이어주기 위해서.
    static String route = ""; // 여행경로 list에 하나씩 하기 위해.
    
    
    public String[] solution(String[][] tickets) {
        
        String[] answer = {};
        
        // 길이만큼 방문여부 노드를 만들어줌.
        visit = new boolean[tickets.length];
        
        for(int i = 0; i < tickets.length; i++) {
            
            String start = tickets[i][0]; // start는 인천.
            String end = tickets[i][1]; // 출발하는 지점과 도착하는 지점.
            
            
            if(start.equals("ICN")) {
                visit[i] = true; // 방문했다고 해주고
                route = start + ","; // route에 출발지점을 더해줌.
                dfs(tickets, end, 1); // 다시 dfs돌려주느넫 카운트 1를 해줌.
                visit[i] = false; // 다시 false로 바꾸어주어야 무한으로 되는것을 막을 수 있따.
            }
        }
        
        Collections.sort(list); // 어순 순서대로 정렬하기.
        
        answer = list.get(0).split(","); // ,으로 나누면서 하나씩 get해주기
        
        return answer;
    }
    
    static void dfs(String[][] tickets, String end3, int count) {
        // route에다가 end랑 , 더해주기
        route += end3 + ",";
        
        // 만약에 길이만큼 카운트를 셋을 떄 같게되면 바로 리턴해줌.
        if(count == tickets.length) {
            list.add(route);
            return;
        }
        
        // for문으로 출발 도착으로 이어진거찾아주기.
        for( int i = 0; i < tickets.length; i++) {
            String start2 = tickets[i][0]; // 다시 start2와 end2에 넣어주고
            String end2 = tickets[i][1];
            
            // 출발 도착 출발 도착 이어진것을 찾기위해
            if(end3.equals(start2) && !visit[i]) {
                visit[i] = true; // 방문했다고 표시해주고
                dfs(tickets, end2 , count+1); // 또 다시 dfs돌려줌
                visit[i] = false; // 무한 막기위해
                route = route.substring(0, route.length() - 4); // substing을 통해 문자열을 잘라주는데 0~길이에서 4만큼 뺀거.
            }
        }
    }
}